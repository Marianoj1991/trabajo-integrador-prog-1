{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "type": "text",
      "version": 2377,
      "versionNonce": 858587511,
      "index": "a0",
      "isDeleted": false,
      "id": "2UnDdKlmDUV5anIWONSl8",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 966.4147168985319,
      "y": 99.25453022306806,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 848.2594604492188,
      "height": 575,
      "seed": 656803193,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1718850675177,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": " Importar y leer los archivos json correspondientes:\n        * Vehiculos, Clientes, Transacciones y los dejo guardados en variables\n            \nvariable id_transaccion = 0\n\n1ro - Necesito registrar compra_venta\n    def registrar_compra_venta()\n        parametros: id_vehiculo, id_cliente, tipo_transaccion\n        - defino el diccionario correspondiente: \n            compra/venta = {}\n        - con el id_vehiculo tengo que buscar el precio de compra/venta del vehículo\n            * abrir el archivo vehiculo.json\n            * buscar el id igual al que viene por parametro\n            * tomar precio de compra/venta segun el tipo_transacción por parametro\n            * guardarlo en una variable\n        - verificar la cantidad de elementos de la lista de transacciones, \n          si esta vacía genero un ID = 1, sino busco el ultimo elemento de la \n          lista[-1] y compruebo el último ID_transacción0:\n            * Abrir archivo transacciones.json \n            * Cerrarlo\n            \n\n        ",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": " Importar y leer los archivos json correspondientes:\n        * Vehiculos, Clientes, Transacciones y los dejo guardados en variables\n            \nvariable id_transaccion = 0\n\n1ro - Necesito registrar compra_venta\n    def registrar_compra_venta()\n        parametros: id_vehiculo, id_cliente, tipo_transaccion\n        - defino el diccionario correspondiente: \n            compra/venta = {}\n        - con el id_vehiculo tengo que buscar el precio de compra/venta del vehículo\n            * abrir el archivo vehiculo.json\n            * buscar el id igual al que viene por parametro\n            * tomar precio de compra/venta segun el tipo_transacción por parametro\n            * guardarlo en una variable\n        - verificar la cantidad de elementos de la lista de transacciones, \n          si esta vacía genero un ID = 1, sino busco el ultimo elemento de la \n          lista[-1] y compruebo el último ID_transacción0:\n            * Abrir archivo transacciones.json \n            * Cerrarlo\n            \n\n        ",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 487,
      "versionNonce": 590820729,
      "index": "a1",
      "isDeleted": false,
      "id": "qA2rnXukKboRg0I91waJ4",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 297.46156311035156,
      "y": 159.11539459228516,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 496.69964599609375,
      "height": 275,
      "seed": 1444906839,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1718850675177,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "[\n    {\n      \"id_transaccion\": 1,\n      \"id_vehiculo\": 1,\n      \"id_cliente\": 1,\n      \"tipo_transaccion\": \"Venta\",\n      \"fecha\": \"2024-01-15\",\n      \"monto\": 15000,\n      \"observaciones\": \"Venta realizada con éxito.\"\n    }\n]",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "[\n    {\n      \"id_transaccion\": 1,\n      \"id_vehiculo\": 1,\n      \"id_cliente\": 1,\n      \"tipo_transaccion\": \"Venta\",\n      \"fecha\": \"2024-01-15\",\n      \"monto\": 15000,\n      \"observaciones\": \"Venta realizada con éxito.\"\n    }\n]",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 410,
      "versionNonce": 924564119,
      "index": "a6",
      "isDeleted": false,
      "id": "Hy5C3ajvsfiIUXoTuIlVX",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2534.0112012217005,
      "y": 608.4487596420564,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 654.199462890625,
      "height": 650,
      "seed": 1139963609,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1718850675177,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "import json\n\ntransacciones = open('transacciones.json', 'rt')\n\ntransacciones_json = json.load(transacciones)\n\nif(len(transacciones_json) == 0):\n  print('EL jsson esta vacio')\nelse: \n  ultimo_elemento = transacciones_json[-1]\n  id_ultimo_elemento = ultimo_elemento['id_transaccion']\n  print(id_ultimo_elemento)\n\n// Con esto abrimos el archivo si no existe crea un array nuevo\n\ntry:\n    with open('transacciones.json', 'r', encoding='utf-8') as f:\n        transacciones_json = json.load(f)\nexcept FileNotFoundError:\n    transacciones_json = []\n\n// Con este metodo guardamos el archivo y lo serializamos\n    a JSON\n\n with open('transacciones.json', 'w', encoding='utf-8') as f:\n    json.dump(transacciones_json, f, ensure_ascii=False, indent=4)",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "import json\n\ntransacciones = open('transacciones.json', 'rt')\n\ntransacciones_json = json.load(transacciones)\n\nif(len(transacciones_json) == 0):\n  print('EL jsson esta vacio')\nelse: \n  ultimo_elemento = transacciones_json[-1]\n  id_ultimo_elemento = ultimo_elemento['id_transaccion']\n  print(id_ultimo_elemento)\n\n// Con esto abrimos el archivo si no existe crea un array nuevo\n\ntry:\n    with open('transacciones.json', 'r', encoding='utf-8') as f:\n        transacciones_json = json.load(f)\nexcept FileNotFoundError:\n    transacciones_json = []\n\n// Con este metodo guardamos el archivo y lo serializamos\n    a JSON\n\n with open('transacciones.json', 'w', encoding='utf-8') as f:\n    json.dump(transacciones_json, f, ensure_ascii=False, indent=4)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "rectangle",
      "version": 383,
      "versionNonce": 1537420567,
      "index": "a8",
      "isDeleted": false,
      "id": "PKkYSqgcwNhTSICPWhsn0",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 844.038166610188,
      "y": -21.976523033746616,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#a5d8ff",
      "width": 1076.2632313152906,
      "height": 729.1166344344531,
      "seed": 1040530199,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [],
      "updated": 1718850510350,
      "link": null,
      "locked": false
    },
    {
      "type": "rectangle",
      "version": 242,
      "versionNonce": 529706615,
      "index": "aA",
      "isDeleted": false,
      "id": "hy1etaHaK06Rya2MIddxT",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2388.5173463879823,
      "y": 546.5772373448442,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 989.9407246624253,
      "height": 845.8300648950856,
      "seed": 1032859319,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "id": "1HiCmn8BV_N0ScRjbMRRA",
          "type": "arrow"
        }
      ],
      "updated": 1718850547290,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 123,
      "versionNonce": 629415513,
      "index": "aB",
      "isDeleted": false,
      "id": "cUdanA3LL1qicx7blBHwo",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2423.3473585579445,
      "y": -515.0488634189965,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 914.7592163085938,
      "height": 875,
      "seed": 1390059161,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [
        {
          "id": "1HiCmn8BV_N0ScRjbMRRA",
          "type": "arrow"
        },
        {
          "id": "Xh4mkMDfVdAocguvutsvq",
          "type": "arrow"
        }
      ],
      "updated": 1718850675177,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "import json\nimport datetime\n\nid = 0\ncompra_venta = {}\ntransacciones = open('transacciones.json', 'rt')\ntransacciones_json = json.load(transacciones)\ntransacciones.close()\n\nif(len(transacciones_json) == 0):\n  id = 0\nelse: \n  ultimo_elemento = transacciones_json[-1]\n  id_ultimo_elemento = ultimo_elemento['id_transaccion']\n  id = id_ultimo_elemento + 1\n  print(id_ultimo_elemento)\n  print(id)\n  \n# creamos diccionario venta/compra\n\ncompra_venta['id_transaccion'] = id\ncompra_venta['id_vehiculo'] = 3\ncompra_venta['id_cliente'] = 5\ncompra_venta['tipo_transaccion'] = 'Venta'\ncompra_venta['fecha'] = datetime.datetime.now().strftime('%Y-%m-%d')\n\nprint(compra_venta)\n\n# Añadimos el elemento a lista y la guardamos sobreescrimos el archivos transacciones.json\n\ntransacciones_json.append(compra_venta)\n\nprint(transacciones_json)\n\n ",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "import json\nimport datetime\n\nid = 0\ncompra_venta = {}\ntransacciones = open('transacciones.json', 'rt')\ntransacciones_json = json.load(transacciones)\ntransacciones.close()\n\nif(len(transacciones_json) == 0):\n  id = 0\nelse: \n  ultimo_elemento = transacciones_json[-1]\n  id_ultimo_elemento = ultimo_elemento['id_transaccion']\n  id = id_ultimo_elemento + 1\n  print(id_ultimo_elemento)\n  print(id)\n  \n# creamos diccionario venta/compra\n\ncompra_venta['id_transaccion'] = id\ncompra_venta['id_vehiculo'] = 3\ncompra_venta['id_cliente'] = 5\ncompra_venta['tipo_transaccion'] = 'Venta'\ncompra_venta['fecha'] = datetime.datetime.now().strftime('%Y-%m-%d')\n\nprint(compra_venta)\n\n# Añadimos el elemento a lista y la guardamos sobreescrimos el archivos transacciones.json\n\ntransacciones_json.append(compra_venta)\n\nprint(transacciones_json)\n\n ",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "rectangle",
      "version": 63,
      "versionNonce": 1493593433,
      "index": "aC",
      "isDeleted": false,
      "id": "JkLN2aK-CqOKj4Lx6WNOz",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2359.6960820268287,
      "y": -584.1639347688904,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 1033.085453469329,
      "height": 994.931591729454,
      "seed": 1881087927,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "id": "1HiCmn8BV_N0ScRjbMRRA",
          "type": "arrow"
        }
      ],
      "updated": 1718850528806,
      "link": null,
      "locked": false
    },
    {
      "type": "arrow",
      "version": 469,
      "versionNonce": 1645624151,
      "index": "aD",
      "isDeleted": false,
      "id": "1HiCmn8BV_N0ScRjbMRRA",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 2743.236278697423,
      "y": 543.341537585651,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 4.080530691926015,
      "height": 123.99157586430943,
      "seed": 1210694361,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1718843663354,
      "link": null,
      "locked": false,
      "startBinding": {
        "elementId": "hy1etaHaK06Rya2MIddxT",
        "focus": -0.21158290000121088,
        "gap": 3.235699759193153
      },
      "endBinding": {
        "elementId": "JkLN2aK-CqOKj4Lx6WNOz",
        "focus": 0.2636038718706144,
        "gap": 8.582304760778015
      },
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          -4.080530691926015,
          -59.228795161637436
        ],
        [
          -3.9956129965244145,
          -123.99157586430943
        ]
      ]
    },
    {
      "type": "arrow",
      "version": 950,
      "versionNonce": 861516409,
      "index": "aE",
      "isDeleted": false,
      "id": "Xh4mkMDfVdAocguvutsvq",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 6.265451374025997,
      "x": 1800.2525208521943,
      "y": 502.3054756312562,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 552.0361035978608,
      "height": 128.88964345708996,
      "seed": 868481401,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1718850541881,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          269.8868299098219,
          -61.53013873945565
        ],
        [
          552.0361035978608,
          -128.88964345708996
        ]
      ]
    },
    {
      "id": "oBQjOn-ZSgJjN_V9r_Lbd",
      "type": "arrow",
      "x": 1702.1906406383182,
      "y": 572.8266267681026,
      "width": 652.564086914063,
      "height": 247.43596394856775,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#a5d8ff",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aG",
      "roundness": {
        "type": 2
      },
      "seed": 565492919,
      "version": 73,
      "versionNonce": 1535854743,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1718850550939,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          652.564086914063,
          247.43596394856775
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": null,
      "endBinding": null,
      "startArrowhead": null,
      "endArrowhead": "arrow"
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}